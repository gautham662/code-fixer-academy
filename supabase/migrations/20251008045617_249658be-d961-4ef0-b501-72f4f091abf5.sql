-- Add 30 new debugging challenges (5 per language) with increasing difficulty

-- Python challenges
INSERT INTO lessons (title, language, difficulty, description, starter_code, expected_output, hints, order_index, points) VALUES
('Variable Swap Error', 'python', 'easy', 'Fix the code to properly swap two variables without losing values.', 'a = 5\nb = 10\na = b\nb = a\nprint(f"a: {a}, b: {b}")', 'a: 10, b: 5', ARRAY['You need a temporary variable to hold one value during the swap.', 'Store the value of ''a'' in a temporary variable before assigning ''b'' to ''a''.'], 2, 10),
('List Index Bug', 'python', 'easy', 'Fix the IndexError when accessing the last element.', 'numbers = [1, 2, 3, 4, 5]\nprint(numbers[5])', '5', ARRAY['Python lists are 0-indexed, so the last element is at index 4, not 5.', 'Use index -1 to access the last element, or index 4.'], 3, 10),
('String Concatenation Issue', 'python', 'medium', 'Fix the TypeError when concatenating string with integer.', 'age = 25\ngreeting = "I am " + age + " years old"\nprint(greeting)', 'I am 25 years old', ARRAY['You cannot concatenate strings with integers directly in Python.', 'Convert the integer to a string using str() function, or use f-string formatting.'], 4, 15),
('Division by Zero', 'python', 'medium', 'Fix the code to handle division by zero and return "undefined" instead.', 'def divide(a, b):\n    return a / b\n\nresult = divide(10, 0)\nprint(result)', 'undefined', ARRAY['You need to check if the divisor is zero before performing division.', 'Add an if statement: if b == 0: return "undefined"'], 5, 15),
('Dictionary KeyError', 'python', 'hard', 'Fix the KeyError by checking if key exists before accessing.', 'user = {"name": "Alice", "age": 30}\nprint(user["email"])', 'No email found', ARRAY['Use the .get() method to safely access dictionary keys.', 'Use: user.get("email", "No email found")'], 6, 20),

-- JavaScript challenges
('Const Reassignment', 'javascript', 'easy', 'Fix the error by using the correct variable declaration.', 'const count = 0;\ncount = 1;\nconsole.log(count);', '1', ARRAY['You cannot reassign a const variable in JavaScript.', 'Change ''const'' to ''let'' to allow reassignment.'], 2, 10),
('Array Push Return Bug', 'javascript', 'easy', 'Fix the code to correctly display the array length after push.', 'const arr = [1, 2, 3];\nconst newArr = arr.push(4);\nconsole.log(newArr);', '4', ARRAY['.push() returns the new length of the array, not the array itself.', 'Remove the assignment: arr.push(4); console.log(arr.length);'], 3, 10),
('Loose Equality Bug', 'javascript', 'medium', 'Fix the comparison to use strict equality.', 'const result = (0 == false);\nconsole.log(result);', 'false', ARRAY['Use strict equality (===) instead of loose equality (==).', 'Change == to === for type-safe comparison.'], 4, 15),
('Callback Scope Issue', 'javascript', 'medium', 'Fix the setTimeout to correctly log the loop variable.', 'for (var i = 0; i < 3; i++) {\n  setTimeout(() => console.log(i), 100);\n}', '0\n1\n2', ARRAY['The var keyword has function scope, not block scope.', 'Change ''var'' to ''let'' to create block-scoped variables.'], 5, 15),
('Async Await Error', 'javascript', 'hard', 'Fix the promise handling to properly await the result.', 'function getData() {\n  return Promise.resolve("data");\n}\nconst result = getData();\nconsole.log(result);', 'data', ARRAY['You need to await the promise or use .then() to get the resolved value.', 'Add async/await: const result = await getData(); or make the function async.'], 6, 20),

-- Java challenges
('Integer Division', 'java', 'easy', 'Fix the integer division to return decimal result.', 'public class Main {\n  public static void main(String[] args) {\n    int result = 5 / 2;\n    System.out.println(result);\n  }\n}', '2.5', ARRAY['Integer division in Java truncates decimal places.', 'Cast at least one operand to double: double result = 5.0 / 2;'], 2, 10),
('String Comparison Bug', 'java', 'easy', 'Fix the string comparison using the correct method.', 'public class Main {\n  public static void main(String[] args) {\n    String s1 = "hello";\n    String s2 = "hello";\n    System.out.println(s1 == s2);\n  }\n}', 'true', ARRAY['Use .equals() method to compare string contents, not ==.', 'Change to: s1.equals(s2)'], 3, 10),
('Array Index Out of Bounds', 'java', 'medium', 'Fix the ArrayIndexOutOfBoundsException.', 'public class Main {\n  public static void main(String[] args) {\n    int[] arr = {1, 2, 3};\n    System.out.println(arr[3]);\n  }\n}', '3', ARRAY['Array indices go from 0 to length-1.', 'Change index from 3 to 2: arr[2]'], 4, 15),
('Null Pointer Exception', 'java', 'medium', 'Fix the NullPointerException by checking for null.', 'public class Main {\n  public static void main(String[] args) {\n    String str = null;\n    System.out.println(str.length());\n  }\n}', '0', ARRAY['Check if the string is null before calling methods on it.', 'Add check: if (str == null) { System.out.println(0); return; }'], 5, 15),
('Infinite Loop', 'java', 'hard', 'Fix the infinite loop in the while condition.', 'public class Main {\n  public static void main(String[] args) {\n    int i = 0;\n    while (i < 5);\n    System.out.println(i);\n  }\n}', '5', ARRAY['The semicolon after while creates an infinite empty loop.', 'Remove the semicolon and add braces: while (i < 5) { System.out.println(i); i++; }'], 6, 20),

-- C++ challenges
('Missing Semicolon', 'cpp', 'easy', 'Add the missing semicolon to fix compilation error.', '#include <iostream>\nusing namespace std;\nint main() {\n  cout << "Hello" << endl\n  return 0;\n}', 'Hello', ARRAY['Every statement in C++ must end with a semicolon.', 'Add semicolon after: cout << "Hello" << endl;'], 2, 10),
('Uninitialized Variable', 'cpp', 'easy', 'Initialize the variable before using it.', '#include <iostream>\nusing namespace std;\nint main() {\n  int x;\n  cout << x + 5 << endl;\n  return 0;\n}', '5', ARRAY['Variables should be initialized before use.', 'Initialize x to 0: int x = 0;'], 3, 10),
('Vector Out of Range', 'cpp', 'medium', 'Fix the vector access to prevent out of range error.', '#include <iostream>\n#include <vector>\nusing namespace std;\nint main() {\n  vector<int> v = {1, 2, 3};\n  cout << v[3] << endl;\n  return 0;\n}', '3', ARRAY['Vector indices are 0-based, so index 3 is out of range for size 3.', 'Change index to 2: v[2]'], 4, 15),
('Memory Leak', 'cpp', 'medium', 'Fix the memory leak by properly deallocating memory.', '#include <iostream>\nusing namespace std;\nint main() {\n  int* ptr = new int(10);\n  cout << *ptr << endl;\n  return 0;\n}', '10', ARRAY['You must delete dynamically allocated memory to prevent leaks.', 'Add before return: delete ptr;'], 5, 15),
('Dangling Pointer', 'cpp', 'hard', 'Fix the dangling pointer by returning a valid pointer.', '#include <iostream>\nusing namespace std;\nint* getPointer() {\n  int x = 10;\n  return &x;\n}\nint main() {\n  int* ptr = getPointer();\n  cout << 10 << endl;\n  return 0;\n}', '10', ARRAY['Returning address of local variable creates a dangling pointer.', 'Use dynamic allocation: int* x = new int(10); or return by value.'], 6, 20),

-- Go challenges
('Short Declaration Scope', 'go', 'easy', 'Fix the variable declaration to use in the correct scope.', 'package main\nimport "fmt"\nfunc main() {\n  x := 5\n  x := 10\n  fmt.Println(x)\n}', '10', ARRAY['You cannot redeclare a variable with := in the same scope.', 'Remove the second := and use = for reassignment: x = 10'], 2, 10),
('Unused Import', 'go', 'easy', 'Remove the unused import to fix compilation.', 'package main\nimport (\n  "fmt"\n  "strings"\n)\nfunc main() {\n  fmt.Println("Hello")\n}', 'Hello', ARRAY['Go does not allow unused imports.', 'Remove the unused strings import.'], 3, 10),
('Slice Append Bug', 'go', 'medium', 'Fix the slice append to properly store the result.', 'package main\nimport "fmt"\nfunc main() {\n  s := []int{1, 2, 3}\n  append(s, 4)\n  fmt.Println(len(s))\n}', '4', ARRAY['append() returns a new slice, it does not modify in place.', 'Assign the result: s = append(s, 4)'], 4, 15),
('Goroutine Race', 'go', 'medium', 'Fix the race condition by using a WaitGroup.', 'package main\nimport "fmt"\nfunc main() {\n  go fmt.Println("goroutine")\n  fmt.Println("main")\n}', 'goroutine\nmain', ARRAY['The main function may exit before the goroutine completes.', 'Use sync.WaitGroup to wait for the goroutine to finish.'], 5, 15),
('Channel Deadlock', 'go', 'hard', 'Fix the channel deadlock by making it buffered.', 'package main\nimport "fmt"\nfunc main() {\n  ch := make(chan int)\n  ch <- 1\n  fmt.Println(<-ch)\n}', '1', ARRAY['Unbuffered channels block until there is a receiver.', 'Make it buffered: ch := make(chan int, 1)'], 6, 20),

-- Rust challenges
('Ownership Error', 'rust', 'easy', 'Fix the ownership error by cloning the string.', 'fn main() {\n  let s1 = String::from("hello");\n  let s2 = s1;\n  println!("{}", s1);\n}', 'hello', ARRAY['After moving s1 to s2, s1 is no longer valid.', 'Clone the string: let s2 = s1.clone(); or use &s1 for borrowing.'], 2, 10),
('Mutable Reference Error', 'rust', 'easy', 'Fix the mutable reference by declaring variable as mutable.', 'fn main() {\n  let x = 5;\n  x = 10;\n  println!("{}", x);\n}', '10', ARRAY['Variables in Rust are immutable by default.', 'Make x mutable: let mut x = 5;'], 3, 10),
('Borrow Checker Error', 'rust', 'medium', 'Fix the multiple mutable borrow error.', 'fn main() {\n  let mut v = vec![1, 2, 3];\n  let r1 = &mut v;\n  let r2 = &mut v;\n  println!("{:?}", r1);\n}', '[1, 2, 3]', ARRAY['Rust does not allow multiple mutable references to the same data.', 'Remove r2 or use r1 in a different scope.'], 4, 15),
('Lifetime Error', 'rust', 'medium', 'Fix the lifetime error by returning owned data.', 'fn get_str() -> &str {\n  let s = String::from("hello");\n  &s\n}\nfn main() {\n  println!("{}", "hello");\n}', 'hello', ARRAY['Cannot return a reference to local variable that will be dropped.', 'Return String instead of &str, or use ''static lifetime.'], 5, 15),
('Option Unwrap Panic', 'rust', 'hard', 'Fix the unwrap panic by handling None case.', 'fn main() {\n  let v = vec![1, 2, 3];\n  let item = v.get(5).unwrap();\n  println!("{}", item);\n}', '0', ARRAY['Use pattern matching or unwrap_or() to handle None.', 'Replace with: let item = v.get(5).unwrap_or(&0);'], 6, 20);